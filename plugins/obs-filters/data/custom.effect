uniform float4x4 ViewProj;
uniform texture2d image;

uniform texture2d target;
uniform float4 color;
uniform float2 mul_val;
uniform float2 add_val;
uniform float rand; 

sampler_state textureSampler {
	Filter    = Linear;
	AddressU  = Clamp;
	AddressV  = Clamp;
};

struct VertDataIn {
	float4 pos : POSITION;
	float2 uv  : TEXCOORD0;
};

struct VertDataOut {
	float4 pos : POSITION;
	float2 uv  : TEXCOORD0;
	float2 uv2 : TEXCOORD1;
};

VertDataOut VSDefault(VertDataIn v_in)
{
	VertDataOut vert_out;
	vert_out.pos = mul(float4(v_in.pos.xyz, 1.0), ViewProj);
	vert_out.uv  = v_in.uv;
	vert_out.uv2 = v_in.uv * mul_val + add_val;
	return vert_out;
}

float4 PSColorMaskRGBA(VertDataOut v_in) : TARGET
{
	float4 rgba = image.Sample(textureSampler, v_in.uv) * color;

	float4 targetRGB = target.Sample(textureSampler, v_in.uv2);
	rgba.a *= (targetRGB.r + targetRGB.g + targetRGB.b) / 3.0;
	return rgba;
}

float hash( float n )
{
    return frac(sin(n)*43758.5453);
}

float noise( float2 x )
{
    // The noise function returns a value in the range -1.0f -> 1.0f

    float2 p = floor(x);
    float2 f = frac(x);

    f       = f*f*(3.0-2.0*f);
    float n = p.x + p.y*57.0;

    return lerp(lerp(lerp( hash(n+0.0), hash(n+1.0),f.x),
                   lerp( hash(n+57.0), hash(n+58.0),f.x),f.y),
               lerp(lerp( hash(n+113.0), hash(n+114.0),f.x),
                   lerp( hash(n+170.0), hash(n+171.0),f.x),f.y), 1);
}

float rand_1_05(float2 uv)
{
    float2 noise = (frac(sin(dot(uv ,float2(12.9898,78.233)*2.0)) * 43758.5453));
    return abs(noise.x + noise.y) * 0.5;
}


float4 Noiser(VertDataOut v_in) : TARGET
{
	float4 rgba = image.Sample(textureSampler, v_in.uv) * rand_1_05(v_in.uv * rand);  	
	return rgba;
}

technique Draw
{
	pass
	{
		vertex_shader = VSDefault(v_in);
		pixel_shader  = Noiser(v_in);
	}
}

